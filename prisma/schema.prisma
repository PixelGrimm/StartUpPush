// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?   // For credentials authentication
  username      String?   @unique
  bio           String?
  website       String?
  twitter       String?
  github        String?
  linkedin      String?
  points        Int       @default(0)
  isProfileComplete Boolean @default(false)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts Account[]
  sessions Session[]
  products Product[]
  votes    Vote[]
  comments Comment[]
  blogPosts BlogPost[]
  updates  Update[]
  notifications Notification[]
  notificationsFrom Notification[] @relation("NotificationFromUser")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Product {
  id          String   @id @default(cuid())
  name        String
  tagline     String
  description String
  logo        String?
  screenshots String?  // JSON array of screenshot URLs
  website     String
  category    String
  tags        String
  mrr         Int?     // Monthly Recurring Revenue
  isPromoted  Boolean  @default(false)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  votes  Vote[]
  comments Comment[]
  promotions Promotion[]
  updates Update[]
  notifications Notification[]

  @@index([createdAt])
  @@index([isPromoted])
}

model Vote {
  id        String   @id @default(cuid())
  value     Int      // 1 for upvote, -1 for downvote
  createdAt DateTime @default(now())

  userId    String
  productId String

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
  @@index([productId])
  @@index([createdAt])
}

model BlogPost {
  id        String   @id @default(cuid())
  title     String
  slug      String   @unique
  content   String
  excerpt   String?
  published Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  authorId String
  author   User   @relation(fields: [authorId], references: [id], onDelete: Cascade)

  @@index([slug])
  @@index([published])
}

model Promotion {
  id        String   @id @default(cuid())
  productId String
  type      String   // "boosted", "max-boosted"
  startDate DateTime
  endDate   DateTime
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())

  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([productId])
  @@index([isActive])
  @@index([endDate])
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId    String
  productId String
  parentId  String?  // For replies

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  parent  Comment? @relation("CommentReplies", fields: [parentId], references: [id], onDelete: Cascade)
  replies Comment[] @relation("CommentReplies")
  notifications Notification[]

  @@index([productId])
  @@index([createdAt])
  @@index([parentId])
}

model Update {
  id        String   @id @default(cuid())
  title     String
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  productId String
  userId    String

  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([productId])
  @@index([createdAt])
  @@index([userId])
}

model Notification {
  id        String   @id @default(cuid())
  type      String   // "comment", "reply", "vote", "update"
  title     String
  message   String
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())

  userId    String
  productId String?
  commentId String?
  fromUserId String? // User who triggered the notification

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  product Product? @relation(fields: [productId], references: [id], onDelete: Cascade)
  comment Comment? @relation(fields: [commentId], references: [id], onDelete: Cascade)
  fromUser User?   @relation("NotificationFromUser", fields: [fromUserId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([isRead])
  @@index([createdAt])
  @@index([productId])
}

model BoostSales {
  id        String   @id @default(cuid())
  month     String   // Format: "YYYY-MM" (e.g., "2024-01")
  planType  String   // "boosted", "max-boosted", "points"
  soldCount Int      @default(0)
  maxSpots  Int      // Maximum spots available for this month
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([month, planType])
  @@index([month])
  @@index([planType])
  @@index([month, planType])
}
